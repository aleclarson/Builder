// Generated by CoffeeScript 1.12.4
var NamedFunction, PhaseMap, assertType, has, prototype;

NamedFunction = require("NamedFunction");

assertType = require("assertType");

has = require("has");

PhaseMap = NamedFunction("PhaseMap", function() {
  return Object.create(PhaseMap.prototype, {
    _map: {
      value: Object.create(null)
    }
  });
});

prototype = {
  has: function(phase) {
    return has(this._map, phase);
  },
  get: function(phase) {
    assertType(phase, String);
    return this._map[phase] || (this._map[phase] = []);
  },
  push: function(phase, callback) {
    assertType(phase, String);
    assertType(callback, Function);
    return this.get(phase).push(callback);
  },
  unshift: function(phase, callback) {
    assertType(phase, String);
    assertType(callback, Function);
    return this.get(phase).unshift(callback);
  },
  apply: function(phase, context, args) {
    var callbacks, index;
    assertType(phase, String);
    if (callbacks = this._map[phase]) {
      index = -1;
      while (++index < callbacks.length) {
        callbacks[index].apply(context, args);
      }
    }
  }
};

Object.assign(PhaseMap.prototype, prototype);

module.exports = PhaseMap;
